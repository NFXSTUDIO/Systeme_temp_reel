Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"618f0c16-c5e1-48b9-ae1e-509c403f88f5\" name=\"Changes\" comment=\"add block.py\">\r\n      <change afterPath=\"$PROJECT_DIR$/bouton.py\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/img.png\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/test.py\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/block.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/block.py\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\",\r\n    \"assignee\": \"NFXSTUDIO\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/NFXSTUDIO/Systeme_temp_reel\",\r\n    \"accountId\": \"2cbd9472-19ec-438a-8c4a-a6caa5f58057\"\r\n  }\r\n}]]></component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 1\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2uqSjJcl5xrENyG6gXVpSGgKxFi\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Python.test.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-7c0b70fcd90d-JavaScript-PY-242.21829.153\" />\r\n        <option value=\"bundled-python-sdk-464836ebc622-b74155a9e76b-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.21829.153\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"618f0c16-c5e1-48b9-ae1e-509c403f88f5\" name=\"Changes\" comment=\"\" />\r\n      <created>1742974744646</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1742974744646</updated>\r\n      <workItem from=\"1742974746532\" duration=\"4598000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"main\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742974827674</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742974827675</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"main\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742974924124</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742974924124</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"add pygame\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742975750269</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742975750269</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"add block.py\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1742978023112</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1742978023112</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"main\" />\r\n    <MESSAGE value=\"add pygame\" />\r\n    <MESSAGE value=\"add block.py\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"add block.py\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/Systeme_temp_real$test.coverage\" NAME=\"test Coverage Results\" MODIFIED=\"1742979317809\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6292e56783ce2423ea1f45cbc2ce45f7d649c68f)
+++ b/.idea/workspace.xml	(date 1742985501945)
@@ -4,12 +4,9 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="618f0c16-c5e1-48b9-ae1e-509c403f88f5" name="Changes" comment="add block.py">
-      <change afterPath="$PROJECT_DIR$/bouton.py" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/img.png" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/test.py" afterDir="false" />
+    <list default="true" id="618f0c16-c5e1-48b9-ae1e-509c403f88f5" name="Changes" comment="test and integration">
+      <change afterPath="$PROJECT_DIR$/game_component.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/block.py" beforeDir="false" afterPath="$PROJECT_DIR$/block.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -26,40 +23,40 @@
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="GitHubPullRequestSearchHistory"><![CDATA[{
-  "lastFilter": {
-    "state": "OPEN",
-    "assignee": "NFXSTUDIO"
+  <component name="GitHubPullRequestSearchHistory">{
+  &quot;lastFilter&quot;: {
+    &quot;state&quot;: &quot;OPEN&quot;,
+    &quot;assignee&quot;: &quot;NFXSTUDIO&quot;
   }
-}]]></component>
-  <component name="GithubPullRequestsUISettings"><![CDATA[{
-  "selectedUrlAndAccountId": {
-    "url": "https://github.com/NFXSTUDIO/Systeme_temp_reel",
-    "accountId": "2cbd9472-19ec-438a-8c4a-a6caa5f58057"
+}</component>
+  <component name="GithubPullRequestsUISettings">{
+  &quot;selectedUrlAndAccountId&quot;: {
+    &quot;url&quot;: &quot;https://github.com/NFXSTUDIO/Systeme_temp_reel&quot;,
+    &quot;accountId&quot;: &quot;2cbd9472-19ec-438a-8c4a-a6caa5f58057&quot;
   }
-}]]></component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 1
-}]]></component>
+}</component>
+  <component name="ProjectColorInfo">{
+  &quot;associatedIndex&quot;: 1
+}</component>
   <component name="ProjectId" id="2uqSjJcl5xrENyG6gXVpSGgKxFi" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "Python.test.executor": "Run",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "git-widget-placeholder": "master",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;Python.test.executor&quot;: &quot;Run&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;master&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="SharedIndexes">
     <attachedChunks>
       <set>
@@ -76,7 +73,7 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1742974744646</updated>
-      <workItem from="1742974746532" duration="4598000" />
+      <workItem from="1742974746532" duration="10452000" />
     </task>
     <task id="LOCAL-00001" summary="main">
       <option name="closed" value="true" />
@@ -110,7 +107,15 @@
       <option name="project" value="LOCAL" />
       <updated>1742978023112</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="test and integration">
+      <option name="closed" value="true" />
+      <created>1742979465237</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1742979465237</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -120,9 +125,10 @@
     <MESSAGE value="main" />
     <MESSAGE value="add pygame" />
     <MESSAGE value="add block.py" />
-    <option name="LAST_COMMIT_MESSAGE" value="add block.py" />
+    <MESSAGE value="test and integration" />
+    <option name="LAST_COMMIT_MESSAGE" value="test and integration" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/Systeme_temp_real$test.coverage" NAME="test Coverage Results" MODIFIED="1742979317809" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
+    <SUITE FILE_PATH="coverage/Systeme_temp_real$test.coverage" NAME="test Coverage Results" MODIFIED="1742979397549" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: game_component.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/game_component.py b/game_component.py
new file mode 100644
--- /dev/null	(date 1742985501919)
+++ b/game_component.py	(date 1742985501919)
@@ -0,0 +1,210 @@
+import pygame
+import time as t
+import random as rd
+
+class Button :
+    def __init__(self,x,y,size_x,size_y,color,hover_color, text, font, text_color,text_color_hover,action = None):
+        self.rect = pygame.Rect(x,y,size_x,size_y)
+        self.color = color
+        self.hover_color = hover_color
+        self.text = text
+        self.font = font
+        self.text_color = text_color
+        self.text_color_hover = text_color_hover
+        self.action = action
+        self.hover = False
+        self.text_surface = self.font.render(self.text,True,self.text_color)
+        self.text_rect = self.text_surface.get_rect(center=self.rect.center)
+
+    def draw(self, screen):
+        if self.hover:
+            pygame.draw.rect(screen,self.hover_color,self.rect)
+            pygame.draw.rect(screen,self.text_color_hover,self.text_rect)
+        else:
+            pygame.draw.rect(screen,self.color,self.rect)
+            pygame.draw.rect(screen,self.text_color,self.text_rect)
+        screen.blit(self.text_surface,self.text_rect)
+
+    def handle_event(self,event):
+        if event.type == pygame.MOUSEBUTTONDOWN:
+            if self.rect.collidepoint(event.pos):
+                self.hover = True
+            else:
+                self.hover = False
+        if event.type == pygame.MOUSEBUTTONUP and event.button == 1:
+            if self.rect.collidepoint(event.pos) and self.action:
+                self.action()
+
+    def set_action(self,action):
+        self.action = action
+
+    def get_rect(self):
+        return self.rect
+
+    def set_text(self,new_text):
+        self.text = new_text
+        self.text_surface = self.font.render(new_text,True,self.text_color)
+        self.text_rect = self.text_surface.get_rect(center=self.rect.center)
+        print("Done")
+
+    def set_hover_color(self,hover_color):
+        self.hover_color = hover_color
+        print("Done")
+
+    def set_text_color(self,text_color):
+        self.text_color = text_color
+        self.text_surface = self.font.render(text_color,True,self.text_color)
+        self.text_rect = self.text_surface.get_rect(center=self.rect.center)
+        print("Done")
+
+    def set_text_color_hover(self,text_color_hover):
+        self.text_color_hover = text_color_hover
+        self.text_surface = self.font.render(text_color_hover,True,self.text_color)
+        self.text_rect = self.text_surface.get_rect(center=self.rect.center)
+        print("Done")
+
+    def set_font(self,font):
+        self.font = font
+        self.text_surface = self.font.render(self.text,True,self.text_color)
+        self.text_rect = self.text_surface.get_rect(center=self.rect.center)
+        print("Done")
+
+
+class Chronometer:
+    def __init__(self,x,y,size,font,couleur = (255,255,255)):
+        self._debut = None
+        self._fin = None
+        self.x = x
+        self.y = y
+        self.font = font
+        self.couleur = couleur
+        self.size = size
+
+    def start(self):
+        self._debut = t.time()
+
+    def stop(self):
+        if self._debut is None:
+            raise ValueError("Chronometer has not been started")
+        self._fin = t.time()
+
+    def time_up(self):
+        if self._debut is None:
+            raise ValueError("Chronometer has not been started")
+        if self._fin is None:
+            return t.time() - self._debut
+        return self._fin - self._debut
+
+    def reset(self):
+        self._debut = None
+        self._fin = None
+
+    def draw(self,screen):
+        if self._debut is None:
+            text = "0.00"
+        else:
+            text = f"{self.time_up():.2f}"
+        text_surface = self.font.render(text,True,self.couleur)
+        text_rect = text_surface.get_rect(topleft=(self.x,self.y))
+        screen.blit(text_surface,text_rect)
+
+class Score:
+    def __init__(self,x,y,font,couleur = (255,255,255)):
+        self.x = x
+        self.y = y
+        self.font = font
+        self.couleur = couleur
+        self.score = 0
+
+    def add_score(self,score):
+        self.score += score
+
+    def subtract_score(self,score):
+        self.score -= score
+        if self.score < 0:
+            self.score = 0
+
+    def set_score(self,score):
+        self.score = score
+
+    def get_score(self):
+        return self.score
+
+    def reset(self):
+        self.score = 0
+
+    def draw(self,screen):
+        text = f"{self.score:.2f}"
+        text_surface = self.font.render(text,True,self.couleur)
+        text_rect = text_surface.get_rect(topleft=(self.x,self.y))
+        screen.blit(text_surface,text_rect)
+
+class Thread:
+    def __init__(self,x,y,size,font,couleur = (255,255,255)):
+        self.x = x
+        self.y = y
+        self.size = size
+        self.font = font
+        self.couleur = couleur
+        self.thread = []
+        self.min_thread = 3
+        self.max_thread = 20
+        self.min_arrival_time = 0
+        self.max_arrival_time = 30
+        self.min_burst_time = 2
+        self.max_burst_time = 15
+        self.min_period = 0
+        self.max_period = 15
+        self.difficulty = 1
+
+    def create_thread(self):
+        number_of_process = rd.randint(self.min_thread,self.max_thread)
+        for i in range(number_of_process):
+            process = dict(name = "L" + str(i),arrival_time = rd.randint(self.min_arrival_time,self.max_arrival_time),burst_time = rd.randint(self.min_burst_time,self.max_burst_time),period = rd.randint(self.min_period,self.max_period))
+            self.thread.append(process)
+
+    def adjust_to_difficulty(self):
+        if self.difficulty == 1:
+            self.min_thread = 3
+            self.max_thread = 5
+            self.max_arrival_time = 5
+            self.max_period = 0
+        elif self.difficulty == 2:
+            self.min_thread = 5
+            self.max_thread = 10
+            self.max_arrival_time = 10
+            self.max_period = 0
+        elif self.difficulty == 3:
+            self.min_thread = 10
+            self.max_thread = 15
+            self.max_arrival_time = 20
+            self.max_period = 5
+        elif self.difficulty == 4:
+            self.min_thread = 15
+            self.max_thread = 20
+            self.max_arrival_time = 30
+            self.max_period = 15
+
+    def set_difficulty(self,difficulty):
+        self.difficulty = difficulty
+
+    def get_difficulty(self):
+        return self.difficulty
+
+    def reset(self):
+        self.thread = []
+
+    def create_level(self):
+        self.adjust_to_difficulty()
+        self.create_thread()
+        return self.thread
+
+    def draw(self,screen):
+        y_offset = self.y
+        for process in self.thread:
+            text = f"Name: {process['name']}, Arrival: {process['arrival_time']}, Burst: {process['burst_time']}, Period: {process['period']}"
+            text_surface = self.font.render(text,True,self.couleur)
+            text_rect = text_surface.get_rect(topleft=(self.x,y_offset))
+            screen.blit(text_surface,text_rect)
+            y_offset += self.size + 5
+
